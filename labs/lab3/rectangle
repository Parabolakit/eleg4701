#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
import math

def velocity_publisher():
    # Todo 1: ROS node initialize
    rospy.init_node('velocity_publisher', anonymous=True)
    # create a Publisher, queue size is 10
    # Todo 2: finish the code below
    turtle_vel_pub = rospy.Publisher('turtle1/cmd_vel', Twist, queue_size=10)
    # set loop rate
    rate = rospy.Rate(10) 

    while not rospy.is_shutdown():
        # init geometry_msgs::Twist
        vel_msg = Twist()

        # Todo 3: Move in a rectangle
        # For simplicity, let's assume the rectangle has sides of length 2 meters
        vel_msg.linear.x = 1.0  # Move forward with linear velocity 1 m/s for 2 seconds
        vel_msg.angular.z = 0.0  # No angular velocity for straight-line motion
        turtle_vel_pub.publish(vel_msg)
        rospy.sleep(2.0)  # Sleep for 2 seconds

        vel_msg.linear.x = 0.0  # Stop linear motion
        vel_msg.angular.z = math.pi/2  # Rotate with angular velocity Ï€/2 rad/s for 1 second (90 degrees)
        turtle_vel_pub.publish(vel_msg)
        rospy.sleep(1.0)  # Sleep for 1 second

        # Repeat the above steps to complete the rectangle
        # You can modify the side lengths, sleep durations, and angular velocities as needed

        vel_msg.linear.x = 1.0
        vel_msg.angular.z = 0.0
        turtle_vel_pub.publish(vel_msg)
        rospy.sleep(2.0)

        vel_msg.linear.x = 0.0
        vel_msg.angular.z = math.pi/2
        turtle_vel_pub.publish(vel_msg)
        rospy.sleep(1.0)

        # Todo 4: modify the code below, let the terminal output 2 velocities, hold 3 digits after the decimal point
        rospy.loginfo("Publish turtle velocity command %0.3f, %0.3f", 
                      vel_msg.linear.x, vel_msg.angular.z)

        # delay as loop rate
        rate.sleep()

if __name__ == '__main__':
    try:
        velocity_publisher()
    except rospy.ROSInterruptException:
        pass
